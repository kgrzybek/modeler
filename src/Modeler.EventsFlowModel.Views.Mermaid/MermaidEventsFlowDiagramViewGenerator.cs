using System.Text;

namespace Modeler.EventsFlowModel.Views.Mermaid;

public class MermaidEventsFlowDiagramViewGenerator
{
    private readonly IMermaidEventsFlowViewsOutput<MermaidEventFlowsView> _viewsOutput;

    public MermaidEventsFlowDiagramViewGenerator(
        IMermaidEventsFlowViewsOutput<MermaidEventFlowsView> viewsOutput)
    {
        _viewsOutput = viewsOutput;
    }

    public void Generate(
        List<MermaidEventFlowsView> views)
    {
        var outputItems = new List<MermaidEventsFlowViewsOutputItem<MermaidEventFlowsView>>();
        foreach (var view in views)
        {
            var sb = new StringBuilder();

            sb.AppendLine("flowchart LR");
            sb.AppendLine("%% Generated by Modeler - do not change.");
            sb.AppendLine();

            GenerateNodes(sb, view);
            
            sb.AppendLine();

            GenerateTriggers(sb, view);

            var content = sb.ToString();
            
            outputItems.Add(new MermaidEventsFlowViewsOutputItem<MermaidEventFlowsView>(view.Id, view, content));
        }
        
        _viewsOutput.Execute(outputItems);
    }

    private void GenerateTriggers(StringBuilder sb, MermaidEventFlowsView view)
    {
        foreach (var flowElement in view.FlowElementsVisible)
        {
            if (flowElement is Command command)
            {
                GenerateTriggers(sb, command);
            }
            
            if (flowElement is Event @event)
            {
                GenerateTriggers(sb, @event);
            }
        }
    }

    private void GenerateTriggers(StringBuilder sb, Event @event)
    {
        foreach (var commandTrigger in @event.CommandTriggers)
        {
            sb.AppendLine($"{@event.Id} --> {commandTrigger.Command.Id}");
        }
    }
    
    private void GenerateTriggers(StringBuilder sb, Command command)
    {
        foreach (var eventTrigger in command.EventTriggers)
        {
            sb.AppendLine($"{command.Id} --> {eventTrigger.Event.Id}");
        }
    }

    private void GenerateNodes(
        StringBuilder sb,
        MermaidEventFlowsView view)
    {
        foreach (var flowElement in view.FlowElementsVisible)
        {
            if (flowElement is Command command)
            {
                GenerateCommand(sb, command);
            }
            
            if (flowElement is Event @event)
            {
                GenerateEvent(sb, @event);
            }
        }
    }

    private void GenerateCommand(StringBuilder sb, Command command)
    {
        sb.AppendLine($"{command.Id}[\"Command {command.Name}\"]");
    }
    
    private void GenerateEvent(StringBuilder sb, Event @event)
    {
        sb.AppendLine($"{@event.Id}[\"Event {@event.Name}\"]");
    }
}