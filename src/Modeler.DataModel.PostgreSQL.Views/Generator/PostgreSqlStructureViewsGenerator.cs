using System.Text;
using Modeler.DataModel.Structure;

namespace Modeler.DataModel.PostgreSQL.Views.Generator;

public class PostgreSqlStructureViewsGenerator
{
    private readonly DataModel _model;

    private readonly IViewsOutput _viewsOutput;

    public PostgreSqlStructureViewsGenerator(DataModel model, IViewsOutput viewsOutput)
    {
        _model = model;
        _viewsOutput = viewsOutput;
    }

    public void Generate()
    {
        var outputItems = new List<StructureItemViewItem>();
        foreach (var table in _model.GetTables())
        {
            var tableContent = GenerateTable(table);
            outputItems.Add(tableContent);
        }
        
        _viewsOutput.Execute(outputItems);
    }

    private static StructureItemViewItem GenerateTable(Table table)
    {
        var sb = new StringBuilder();
        sb.AppendLine("-- Generated by Modeler - do not change.");
        sb.AppendLine($"CREATE TABLE {table.Schema.Name}.{table.Name} (");
        int columnGenerated = 0;
        foreach (var column in table.Columns)
        {
            columnGenerated++;

            string columnTypeConstraintsText;
            if (column.IsPrimaryKey)
            {
                columnTypeConstraintsText = "PRIMARY KEY";
            }
            else if (column.IsNullable)
            {
                columnTypeConstraintsText = "NULL";
            }
            else
            {
                columnTypeConstraintsText = "NOT NULL";
            }

            if (columnGenerated == table.Columns.Count)
            {
                sb.AppendLine($"    {column.Name} {column.Type.Name} {columnTypeConstraintsText}");
            }
            else
            {
                sb.AppendLine($"    {column.Name} {column.Type.Name} {columnTypeConstraintsText}, ");
            }
        }

        sb.AppendLine(");");

        return new StructureItemViewItem
        {
            StructureName = $"{table.Schema.Name}.{table.Name}",
            Content = sb.ToString()
        };
    }
}