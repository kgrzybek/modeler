using System.Text;

namespace Modeler.ComponentsModel.Views.PlantUml;

public class PlantComponentsDiagramViewGenerator
{
    private readonly IViewsOutput<ComponentsDiagramView> _viewsOutput;

    private readonly Model _model;

    public PlantComponentsDiagramViewGenerator(Model model, IViewsOutput<ComponentsDiagramView> viewsOutput)
    {
        _viewsOutput = viewsOutput;
        _model = model;
    }

    public void Generate(
        List<ComponentsDiagramView> views)
    {
        var outputItems = new List<ViewOutputItem<ComponentsDiagramView>>();
        foreach (var view in views)
        {
            var sb = new StringBuilder();

            sb.AppendLine("@startuml");
            sb.AppendLine("'Generated by Modeler - do not change.");
            sb.AppendLine();

            GenerateComponents(sb, view);
            GenerateRelationships(sb, view);
            
            sb.AppendLine();
            sb.AppendLine("@enduml");
            sb.AppendLine();

            var content = sb.ToString();
            
            outputItems.Add(new ViewOutputItem<ComponentsDiagramView>(view.Id, view, content));
        }
        
        _viewsOutput.Execute(outputItems);
    }

    private static string GetIndentText(int indentSize)
    {
        var indentText = string.Empty;
        for (int i = 0; i < indentSize * 4; i++)
        {
            indentText += " ";
        }

        return indentText;
    }
    
    private static void GenerateComponents(
        StringBuilder sb,
        ComponentsDiagramView view)
    {
        foreach (var component in view.Components.OrderBy(x => x.Name))
        {
            GenerateComponent(sb, component, -1);

            sb.AppendLine();
        }
    }

    private static void GenerateComponent(
        StringBuilder sb,
        Component component,
        int indentLevel)
    {
        indentLevel += 1;
        var indentText = GetIndentText(indentLevel);
        sb.AppendLine($"{indentText}component \"{component.Name}\"" + " {");

        foreach (var subComponent in component.SubComponents)
        {
            GenerateComponent(sb, subComponent, indentLevel);
        }

        sb.AppendLine($"{indentText}}}");
    }
    
    private void GenerateRelationships(StringBuilder sb, ComponentsDiagramView view)
    {
        foreach (var relationship in _model.GetRelationships())
        {
            bool showSource = false;
            
            if (view.Components.Contains(relationship.Source))
            {
                showSource = true;
            }
            else
            {
                foreach (var viewComponent in view.Components)
                {
                    if(viewComponent.GetAll().Contains(relationship.Source))
                    {
                        showSource = true;
                    }
                }
            }
            
            bool showTarget = false;
            
            if (view.Components.Contains(relationship.Target))
            {
                showTarget = true;
            }
            else
            {
                foreach (var viewComponent in view.Components)
                {
                    if(viewComponent.GetAll().Contains(relationship.Target))
                    {
                        showTarget = true;
                    }
                }
            }
            
            if (!showSource || !showTarget)
            {
                continue;
            }

            if (relationship is UsageComponentRelationship usageComponentRelationship)
            {
                GenerateForUsage(
                    sb,
                    usageComponentRelationship);
            }
            
            if (relationship is DependencyComponentRelationship dependencyComponentRelationship)
            {
                GenerateForDependency(
                    sb,
                    dependencyComponentRelationship);
            }
        }
    }
    
    private static void GenerateForUsage(StringBuilder sb, UsageComponentRelationship relationship)
    {
        string label = "use";
        sb.AppendLine(
            $"{relationship.Source.Name} --> {relationship.Target.Name} : {label}");
    }
    
    private static void GenerateForDependency(StringBuilder sb, DependencyComponentRelationship relationship)
    {
        string label = "dependency";
        sb.AppendLine(
            $"{relationship.Source.Name} ..> {relationship.Target.Name} : {label}");
    }
}