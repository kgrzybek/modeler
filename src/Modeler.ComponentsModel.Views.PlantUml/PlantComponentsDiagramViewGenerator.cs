using System.Text;

namespace Modeler.ComponentsModel.Views.PlantUml;

public class PlantComponentsDiagramViewGenerator
{
    private readonly IViewsOutput<ComponentsDiagramView> _viewsOutput;

    private readonly Model _model;

    public PlantComponentsDiagramViewGenerator(Model model, IViewsOutput<ComponentsDiagramView> viewsOutput)
    {
        _viewsOutput = viewsOutput;
        _model = model;
    }

    public void Generate(
        List<ComponentsDiagramView> views)
    {
        var outputItems = new List<ViewOutputItem<ComponentsDiagramView>>();
        foreach (var view in views)
        {
            var sb = new StringBuilder();

            sb.AppendLine("@startuml");
            sb.AppendLine("'Generated by Modeler - do not change.");
            sb.AppendLine();

            GenerateComponents(sb, view);
            
            sb.AppendLine();
            sb.AppendLine("@enduml");
            sb.AppendLine();

            var content = sb.ToString();
            
            outputItems.Add(new ViewOutputItem<ComponentsDiagramView>(view.Id, view, content));
        }
        
        _viewsOutput.Execute(outputItems);
    }

    private static string GetIndentText(int indentSize)
    {
        var indentText = string.Empty;
        for (int i = 0; i < indentSize * 4; i++)
        {
            indentText += " ";
        }

        return indentText;
    }
    
    private static void GenerateComponents(
        StringBuilder sb,
        ComponentsDiagramView view)
    {
        foreach (var component in view.Components.OrderBy(x => x.Name))
        {
            GenerateComponent(sb, component, 0);

            sb.AppendLine();
        }
    }

    private static void GenerateComponent(
        StringBuilder sb,
        Component component,
        int indentLevel)
    {
        var indentText = GetIndentText(indentLevel);
        sb.AppendLine($"{indentText}component \"{component.Name}\"" + " {");

        foreach (var subComponent in component.SubComponents)
        {
            GenerateComponent(sb, subComponent, ++indentLevel);
        }

        sb.AppendLine($"{indentText}}}");
    }
}