using System.Text;

namespace Modeler.StateModel.Views.PlantUml;

public class PlantUmlStateMachineViewGenerator
{
    private readonly IStateMachineViewsOutput<StateMachineView> _stateMachineViewsOutput;

    public PlantUmlStateMachineViewGenerator(
        IStateMachineViewsOutput<StateMachineView> stateMachineViewsOutput)
    {
        _stateMachineViewsOutput = stateMachineViewsOutput;
    }

    public void Generate(
        List<StateMachineView> views)
    {
        var outputItems = new List<StateMachineViewOutputItem<StateMachineView>>();
        foreach (var view in views)
        {
            var sb = new StringBuilder();

            sb.AppendLine("@startuml");
            sb.AppendLine("'Generated by Modeler - do not change.");

            sb.AppendLine();

            GenerateStates(sb, view);
            
            GenerateTransitions(sb, view);

            sb.AppendLine();
            sb.AppendLine("@enduml");
            sb.AppendLine();

            var content = sb.ToString();
            
            outputItems.Add(new StateMachineViewOutputItem<StateMachineView>(view.Id, view, content));
        }
        
        _stateMachineViewsOutput.Execute(outputItems);
    }

    private static void GenerateTransitions(StringBuilder sb, StateMachineView view)
    {
        foreach (var transition in view.StateMachine.GetTransitions())
        {
            var fromStateId = transition.FromState is InitialState ? "[*]" : transition.FromState.Id;
            var toStateId = transition.ToState is EndState ? "[*]" : transition.ToState.Id;
            string transitionName = transition.Event.Name != string.Empty ? $" : {transition.Event.Name}" : string.Empty;
            sb.AppendLine($"{fromStateId} --> {toStateId}{transitionName}");
        }
    }

    private static void GenerateStates(StringBuilder sb,
        StateMachineView view)
    {
        foreach (var state in view.StateMachine.GetStates())
        {
            GenerateState(sb, state);

            sb.AppendLine();
        }
    }

    private static void GenerateState(StringBuilder sb,
        State state)
    {
        sb.AppendLine($"state \"{state.Name}\" as {state.Id}");
    }
}