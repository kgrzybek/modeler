using System.Text;
using Modeler.SequenceModel.Views.Shared;

namespace Modeler.SequenceModel.Views.PlantUml;

public class PlantUmlSequenceDiagramViewGenerator
{
    private readonly ISequenceDiagramViewsOutput<SequenceDiagramView> _sequenceDiagramViewsOutput;
    private readonly ISequenceDiagramViewTranslator _viewTranslator;
    private readonly ISequenceDiagramViewLayout _viewLayout;

    public PlantUmlSequenceDiagramViewGenerator(
        ISequenceDiagramViewsOutput<SequenceDiagramView> sequenceDiagramViewsOutput,
        ISequenceDiagramViewTranslator viewTranslator, 
        ISequenceDiagramViewLayout viewLayout)
    {
        _sequenceDiagramViewsOutput = sequenceDiagramViewsOutput;
        _viewTranslator = viewTranslator;
        _viewLayout = viewLayout;
    }

    public void Generate(
        List<SequenceDiagramView> views)
    {
        var outputItems = new List<SequenceDiagramViewOutputItem<SequenceDiagramView>>();
        foreach (var view in views)
        {
            var sb = new StringBuilder();

            sb.AppendLine("@startuml");
            sb.AppendLine("'Generated by Modeler - do not change.");
            if (view.AutonumberMessages)
            {
                sb.AppendLine("autonumber"); 
            }

            sb.AppendLine();

            GenerateParticipants(sb, view, _viewTranslator, _viewLayout);

            GenerateMessages(sb, view);

            sb.AppendLine();
            sb.AppendLine("@enduml");
            sb.AppendLine();

            var content = sb.ToString();
            
            outputItems.Add(new SequenceDiagramViewOutputItem<SequenceDiagramView>(view.Id, view, content));
        }
        
        _sequenceDiagramViewsOutput.Execute(outputItems);
    }
    
    private void GenerateMessages(StringBuilder sb, SequenceDiagramView view)
    {
        foreach (var message in view.Sequence.GetMessages())
        {
            if (view.ParticipantsToShow.All(x => x != message.Sender) || view.ParticipantsToShow.All(x => x != message.Receiver))
            {
                continue;
            }

            string? messageArrow = null;
            if (message.Type is SynchronousRequestMessage or SelfMessage)
            {
                messageArrow = "->";
            }

            if (message.Type is SynchronousResponseMessage)
            {
                messageArrow = "-->";
            }
            
            if (message.Type is EventMessage)
            {
                messageArrow = "->>";
            }

            if (messageArrow == null)
            {
                throw new Exception("Unknown message type");
            }
            
            sb.AppendLine($"{message.Sender.Id} {messageArrow} {message.Receiver.Id} : {message.Name} {_viewTranslator.TranslateMessageParameters(message.Parameters)}");
            
            if (message.Type is SynchronousRequestMessage)
            {
                sb.AppendLine($"activate {message.Receiver.Id}");
                sb.AppendLine();
            }

            if (message.Type is SynchronousResponseMessage)
            {
                sb.AppendLine($"deactivate {message.Sender.Id}");
                sb.AppendLine();
            }
        }
    }

    private static void GenerateParticipants(StringBuilder sb,
        SequenceDiagramView view,
        ISequenceDiagramViewTranslator viewTranslator,
        ISequenceDiagramViewLayout viewLayout)
    {
        foreach (var participant in view.ParticipantsToShow)
        {
            GenerateParticipant(sb, participant, viewTranslator, viewLayout);

            sb.AppendLine();
        }
    }

    private static void GenerateParticipant(StringBuilder sb,
        Participant participant,
        ISequenceDiagramViewTranslator viewTranslator,
        ISequenceDiagramViewLayout viewLayout)
    {
        var participantType = viewTranslator.TranslateParticipantType(participant.Type);
        sb.AppendLine($"{participantType} \"{participant.Name}\" as {participant.Id} <<{viewTranslator.TranslateParticipantStereoType(participant.Type)}>> {viewLayout.GetParticipantColor(participant.Type)}");
    }
}