using System.Text;
using Modeler.ComponentsModel.Views.Shared;

namespace Modeler.ComponentsModel.Views.Markdown.Details;

public class MarkdownComponentsDetailsViewsGenerator
{
    private readonly IViewsOutput<MarkdownComponentDetailsView> _viewsOutput;
    private readonly Model _model;

    public MarkdownComponentsDetailsViewsGenerator(Model model, IViewsOutput<MarkdownComponentDetailsView> viewsOutput)
    {
        _viewsOutput = viewsOutput;
        _model = model;
    }

    public void Generate(List<MarkdownComponentDetailsView> views)
    {
        var outputItems = new List<ViewOutputItem<MarkdownComponentDetailsView>>();
        foreach (var view in views)
        {
            var content = Generate(view);
            outputItems.Add(new ViewOutputItem<MarkdownComponentDetailsView>(view.Id, view, content));
        }

        _viewsOutput.Execute(outputItems);
    }

    private string Generate(MarkdownComponentDetailsView view)
    {
        var sb = new StringBuilder();
        sb.AppendLine("<!-- Generated by Modeler - do not change. -->");
        sb.AppendLine("|Relation|Component|Type|");
        sb.AppendLine("|---|---|---|");

        foreach (var subComponent in view.Component.SubComponents)
        {
            sb.AppendLine($"|Contains|{subComponent.Name}|{subComponent.Type.Name}|");
        }

        var relationships = _model.GetComponentRelationships(view.Component);

        foreach (var relationship in relationships)
        {
            if (relationship is UsageComponentRelationship usage)
            {
                if (relationship.Source == view.Component)
                {
                    sb.AppendLine($"|Use|{relationship.Target.Name}|{relationship.Target.Type.Name}|");
                }
                else if (_model.Contains(view.Component, relationship.Source))
                {
                    sb.AppendLine($"|Use|{relationship.Target.Name}|{relationship.Target.Type.Name}|");
                }
                else
                {
                    sb.AppendLine($"|Is used by|{relationship.Source.Name}|{relationship.Source.Type.Name}|");
                }
            }
        }

        return sb.ToString();
    }
}
