using System.Text;
using Modeler.DataModel.PostgreSQL.Views.Shared;
using Modeler.DataModel.Structure;

namespace Modeler.DataModel.PostgreSQL.Views.Markdown;

public static class DataModelMarkdownGenerator
{
    public static void Generate(
        string absoluteModelsPath,
        string modelName,
        DataModel model,
        IViewTranslator viewTranslator)
    {
        var schemaNames = model.GetTables().Select(x => x.Schema.Name).Distinct();

        foreach (var schema in schemaNames)
        {
            var sb = new StringBuilder();
            sb.AppendLine("<!-- Generated by Modeler - do not change. -->");
            GenerateTables(modelName, model, schema, sb, viewTranslator);
            GenerateViews(modelName, model, schema, sb, viewTranslator);

            var content = sb.ToString();

            var path = Path.Combine(absoluteModelsPath, $"{modelName.ToUpper()}/{schema}_schema.md");
            var directoryPath = Path.GetDirectoryName(path)!;

            if (!Directory.Exists(directoryPath))
            {
                Directory.CreateDirectory(directoryPath);
            }

            File.WriteAllText(path, content, Encoding.UTF8);
        }
    }

    private static void GenerateTables(
        string modelName,
        DataModel model,
        string schema,
        StringBuilder sb,
        IViewTranslator viewTranslator)
    {
        sb.AppendLine($"## Tables - {schema}");
        sb.AppendLine();
        var tables = model.GetTables();

        foreach (var table in tables.Where(x => x.Schema.Name == schema).OrderBy(x => x.Name))
        {
            sb.AppendLine($"### {table.Name}");
            sb.AppendLine();

            sb.AppendLine($"|Name|Type|Is required|Description|");
            sb.AppendLine("|---|---|---|---|");

            foreach (var column in table.Columns
                         .Select(x => (TableColumn)x).OrderBy(x => !x.IsPrimaryKey)
                         .ThenBy(x => x.Name))
            {
                var name = column.IsPrimaryKey ? $"{column.Name} PK" : column.Name;
                sb.AppendLine($"|{name}|{column.Type.Name}|{(!column.IsNullable ? "YES" : "NO")}|{column.Description}|");
            }

            sb.AppendLine();

            var fromRelations = model.GetRelationships().Where(x => x.From == table).ToList();

            if (fromRelations.Any())
            {
                sb.AppendLine($"#### {table.Name} - relationships from");
                sb.AppendLine("|From|Multiplicity|Column|Multiplicity|To|");
                sb.AppendLine("|---|---|---|---|---|");

                foreach (var relation in fromRelations)
                {
                    var fromViewStereotype = relation.From is View ? " (view)" : string.Empty;
                    var toViewStereotype = relation.To is View ? " (view)" : string.Empty;
                    sb.AppendLine($"|{relation.From.Name}{fromViewStereotype}|{viewTranslator.TranslateMultiplicity(relation.FromMultiplicity)}|{relation.GetRelationshipName()}|{viewTranslator.TranslateMultiplicity(relation.ToMultiplicity)}|{relation.To.Name}{toViewStereotype}|");
                }

                sb.AppendLine();
            }

            var toRelations = model.GetRelationships().Where(x => x.To == table).ToList();

            if (toRelations.Any())
            {
                sb.AppendLine($"#### {table.Name} - relationships to");
                sb.AppendLine("|From|Multiplicity|Column|Multiplicity|To|");
                sb.AppendLine("|---|---|---|---|---|");

                foreach (var relation in toRelations)
                {
                    var fromViewStereotype = relation.From is View ? " (view)" : string.Empty;
                    var toViewStereotype = relation.To is View ? " (view)" : string.Empty;
                    sb.AppendLine($"|{relation.From.Name}{fromViewStereotype}|{viewTranslator.TranslateMultiplicity(relation.FromMultiplicity)}|{relation.GetRelationshipName()}|{viewTranslator.TranslateMultiplicity(relation.ToMultiplicity)}|{relation.To.Name}{toViewStereotype}|");
                }

                sb.AppendLine();
            }
        }
    }

    private static void GenerateViews(
        string modelName,
        DataModel model,
        string schema,
        StringBuilder sb,
        IViewTranslator viewTranslator)
    {
        sb.AppendLine($"## Views - {schema}");
        sb.AppendLine();
        var views = model.GetViews();

        foreach (var view in views.OrderBy(x => x.Name))
        {
            sb.AppendLine($"### {view.Name}");
            sb.AppendLine();

            sb.AppendLine("|Name|Type|");
            sb.AppendLine("|---|---|");

            foreach (var column in view.Columns.OrderBy(x => x.Name))
            {
                sb.AppendLine($"|{column.Name}|{column.Type.Name}|");
            }

            sb.AppendLine();

            var fromRelations = model.GetRelationships().Where(x => x.From == view).ToList();

            if (fromRelations.Any())
            {
                sb.AppendLine($"#### {view.Name} - relationships from");
                sb.AppendLine("|From|Multiplicity|Column|Multiplicity|To|");
                sb.AppendLine("|---|---|---|---|---|");

                foreach (var relation in fromRelations)
                {
                    var fromViewStereotype = relation.From is View ? " (view)" : string.Empty;
                    var toViewStereotype = relation.To is View ? " (view)" : string.Empty;
                    sb.AppendLine($"|{relation.From.Name}{fromViewStereotype}|{viewTranslator.TranslateMultiplicity(relation.FromMultiplicity)}|{relation.GetRelationshipName()}|{viewTranslator.TranslateMultiplicity(relation.ToMultiplicity)}|{relation.To.Name}{toViewStereotype}|");
                }

                sb.AppendLine();
            }

            var toRelations = model.GetRelationships().Where(x => x.To == view).ToList();

            if (toRelations.Any())
            {
                sb.AppendLine($"#### {view.Name} - relationships to");
                sb.AppendLine("|From|Multiplicity|Column|Multiplicity|To|");
                sb.AppendLine("|---|---|---|---|---|");

                foreach (var relation in toRelations)
                {
                    var fromViewStereotype = relation.From is View ? " (view)" : string.Empty;
                    var toViewStereotype = relation.To is View ? " (view)" : string.Empty;
                    sb.AppendLine($"|{relation.From.Name}{fromViewStereotype}|{viewTranslator.TranslateMultiplicity(relation.FromMultiplicity)}|{relation.GetRelationshipName()}|{viewTranslator.TranslateMultiplicity(relation.ToMultiplicity)}|{relation.To.Name}{toViewStereotype}|");
                }

                sb.AppendLine();
            }
        }
    }
}
