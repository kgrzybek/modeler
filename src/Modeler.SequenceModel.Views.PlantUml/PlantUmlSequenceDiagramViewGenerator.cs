using System.Text;

namespace Modeler.SequenceModel.Views.PlantUml;

public class PlantUmlSequenceDiagramViewGenerator
{
    private readonly IViewsOutput<SequenceDiagramView> _viewsOutput;
    private readonly IPlantUmlSequenceDiagramViewTranslator _viewTranslator;

    public PlantUmlSequenceDiagramViewGenerator(
        IViewsOutput<SequenceDiagramView> viewsOutput,
        IPlantUmlSequenceDiagramViewTranslator viewTranslator)
    {
        _viewsOutput = viewsOutput;
        _viewTranslator = viewTranslator;
    }

    public void Generate(
        List<SequenceDiagramView> views)
    {
        var outputItems = new List<ViewOutputItem<SequenceDiagramView>>();
        foreach (var view in views)
        {
            var sb = new StringBuilder();

            sb.AppendLine("@startuml");
            sb.AppendLine("'Generated by Modeler - do not change.");
            if (view.AutonumberMessages)
            {
                sb.AppendLine("autonumber"); 
            }

            sb.AppendLine();

            GenerateParticipants(sb, view, _viewTranslator);

            GenerateMessages(sb, view);

            sb.AppendLine();
            sb.AppendLine("@enduml");
            sb.AppendLine();

            var content = sb.ToString();
            
            outputItems.Add(new ViewOutputItem<SequenceDiagramView>(view.Id, view, content));
        }
        
        _viewsOutput.Execute(outputItems);
    }
    
    private void GenerateMessages(StringBuilder sb, SequenceDiagramView view)
    {
        foreach (var message in view.Sequence.GetMessages())
        {
            string messageArrow = string.Empty;
            if (message.Type is SynchronousRequestMessage)
            {
                messageArrow = "->";
            }

            if (message.Type is SynchronousResponseMessage)
            {
                messageArrow = "-->";
            }
            
            sb.AppendLine($"{message.Sender.Name} {messageArrow} {message.Receiver.Name} : {message.Name} {_viewTranslator.TranslateMessageParameters(message.Parameters)}");
            
            if (message.Type is SynchronousRequestMessage)
            {
                sb.AppendLine($"activate {message.Receiver.Name}");
                sb.AppendLine();
            }

            if (message.Type is SynchronousResponseMessage)
            {
                sb.AppendLine($"deactivate {message.Sender.Name}");
                sb.AppendLine();
            }
        }
    }

    private static void GenerateParticipants(
        StringBuilder sb,
        SequenceDiagramView view,
        IPlantUmlSequenceDiagramViewTranslator viewTranslator)
    {
        var participants = view.Sequence.GetParticipants().OrderBy(x => view.ParticipantsOrder[x.GetType()]); 
        foreach (var participant in participants)
        {
            GenerateParticipant(sb, participant, viewTranslator);

            sb.AppendLine();
        }
    }

    private static void GenerateParticipant(
        StringBuilder sb,
        Participant participant,
        IPlantUmlSequenceDiagramViewTranslator viewTranslator)
    {
        var participantType = viewTranslator.TranslateParticipantType(participant.Type);
        sb.AppendLine($"{participantType} {participant.Name}");
    }
}